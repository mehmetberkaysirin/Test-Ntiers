using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using Test.Business.Abstract;
using Test.Entities.Concrete;
using Test.WebApi.Dtos;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;

namespace Test.WebApi.Controllers
{
	/// <summary>
	/// Generated by ElementalBuilder (12.11.2019 16:39:22)
	/// </summary>
	[Route("api/[controller]")]
	[ApiController]
	public class UsersController : ControllerBase 
	{
		 private IUserService _userService; 
		 private IConfiguration _configuration; 
		 public UsersController(IUserService userService, IConfiguration configuration) 
		{
			_userService = userService;
			_configuration = configuration;
		}

		[HttpGet("TestGet")]
		public IActionResult Test() 
		{
			return Ok();
		}

		[HttpPost("TestPost")]
		public IActionResult Test([FromBody]UserDto userDto) 
		{
			return Ok(userDto);
		}

		[HttpPost("Register")]
		public IActionResult Register([FromBody]UserDto userDto) 
		{
			if (_userService.UserExists(userDto.EMail))
			{
				ModelState.AddModelError("UserEmail","User already exist!");
			}
			if (!ModelState.IsValid)
			{
				 return BadRequest(ModelState);
			}
			int result =_userService.Register(new User
			{
				EMail = userDto.EMail,
				FirstName = userDto.FirstName,
				LastName = userDto.LastName
			}, userDto.Password);
			if (result > 0)
				return StatusCode(201);
			else
				return BadRequest();
		}

		[HttpPost("Login")]
		public IActionResult Login([FromBody] UserDto userDto) 
		{
			var user = _userService.Login(userDto.EMail, userDto.Password);
			if (user == null) 
				return Unauthorized();

			var tokenHandler = new JwtSecurityTokenHandler();

			var key = Encoding.ASCII.GetBytes(_configuration.GetSection("AppSettings: Token").Value);


			SecurityTokenDescriptor securityTokenDescriptor = new SecurityTokenDescriptor();

			securityTokenDescriptor.Subject = new ClaimsIdentity(new Claim[]

			{
				new Claim(ClaimTypes.NameIdentifier,user.Id.ToString()),

				new Claim(ClaimTypes.Name,user.FirstName + " " + user.LastName)

			}

			 );

			securityTokenDescriptor.Expires = DateTime.Now.AddDays(1);

			securityTokenDescriptor.SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature);


			var token = tokenHandler.CreateToken(securityTokenDescriptor);

			var tokenString = tokenHandler.WriteToken(token);

			return Ok(tokenString);

		}


	}
}
	// C:\Users\manas\source\repos\Test\Test.WebApi\Controllers 
