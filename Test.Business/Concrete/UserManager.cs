using System;
using System.Collections.Generic;
using System.Text;
using System.Linq.Expressions;
using Test.Business.Abstract;
using Test.DataAccess.Abstract;
using Test.Entities.Concrete;

namespace Test.Business.Concrete
{
	/// <summary>
	/// Generated by ElementalBuilder (12.11.2019 16:39:22)
	/// </summary>
	public class UserManager : IUserService 
	{
		 private IUserDal _userDal; 
		 public UserManager(IUserDal userDal) 
		{
			_userDal = userDal;  
		}

		 public int Register(User user, string password) 
		{
			 byte[] passwordHash, passwordSalt;
			 CreatePasswordHash(password, out passwordHash, out passwordSalt);
			 user.PasswordSalt = passwordSalt;
			 user.PasswordHash = passwordHash;
			return _userDal.Add(user);
		}

		 private void CreatePasswordHash(string password, out byte[] passwordHash, out byte[] passwordSalt) 
		{
			 using (var hmac = new System.Security.Cryptography.HMACSHA512()) 
			{
				 passwordSalt = hmac.Key; 
				 passwordHash = hmac.ComputeHash(Encoding.UTF8.GetBytes(password)); 
			}
		}

		 public User Login(string eMail, string password) 
		{
			var user = _userDal.Get(u => u.EMail == eMail); 
			if (user == null) 
			{
				return null; 
			}

			if (!VerifyPasswordHash(password, user.PasswordHash, user.PasswordSalt)) 
			{
				return null; 
			}

			return user; 
		}

		private bool VerifyPasswordHash(string password, byte[] passwordHash, byte[] passwordSalt) 
		{
			using (var hmac = new System.Security.Cryptography.HMACSHA512(passwordSalt)) 
			{
				var computedPasswordHash = hmac.ComputeHash(Encoding.UTF8.GetBytes(password)); 
				for (int i = 0; i < computedPasswordHash.Length; i++) 
				{
					if (computedPasswordHash[i] != passwordHash[i]) 
					return false; 
				}
			 return true; 
			}
		}

		public bool UserExists(string eMail) 
		{
			var user = _userDal.Get(u => u.EMail == eMail); 
			if (user == null) 
				return false; 
			return true; 
		}

	}
}
	// C:\Users\manas\source\repos\Test\Test.Business\Concrete 
